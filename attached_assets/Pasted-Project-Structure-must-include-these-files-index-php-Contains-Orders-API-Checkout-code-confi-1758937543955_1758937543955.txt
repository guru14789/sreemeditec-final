Project Structure – must include these files:
index.php → Contains Orders API & Checkout code.
config.php → Holds API Keys (KEY_ID & KEY_SECRET).
verify.php → Verifies payment signature.
success.html → Page to redirect after successful payment.
Step 1: Build Integration
1.1 Create Order in Server
Use Orders API (server-side only).
Generate order_id → Pass to checkout.
Use Api($key_id, $secret) for authentication.
Sample PHP Code (create order):
require('config.php');
require('razorpay-php/Razorpay.php');

use Razorpay\Api\Api;

$api = new Api($key_id, $key_secret);

$orderData = [
    'receipt'         => 3456,
    'amount'          => 5000 * 100, // amount in paise
    'currency'        => 'INR',
    'payment_capture' => 1 // auto capture
];

$order = $api->order->create($orderData);
$orderId = $order['id'];
1.2 Add Checkout Options
Create pay.html and add Pay button with checkout options.
Use either Callback URL (redirect flow) OR Handler Function (stay on page).
JS Checkout Example:
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<button id="rzp-button1">Pay</button>
<script>
var options = {
    "key": "YOUR_KEY_ID",
    "amount": "5000",
    "currency": "INR",
    "name": "Acme Corp",
    "description": "Test Transaction",
    "order_id": "<?php echo $orderId; ?>",
    "handler": function (response){
        alert(response.razorpay_payment_id);
        alert(response.razorpay_order_id);
        alert(response.razorpay_signature);
    },
    "theme": { "color": "#3399cc" }
};
var rzp1 = new Razorpay(options);
document.getElementById('rzp-button1').onclick = function(e){
    rzp1.open();
    e.preventDefault();
}
</script>
1.3 Verify Payment Signature (in verify.php)
use Razorpay\Api\Api;
use Razorpay\Api\Errors\SignatureVerificationError;

$api = new Api($key_id, $key_secret);

try {
    $attributes = [
        'razorpay_order_id' => $_POST['razorpay_order_id'],
        'razorpay_payment_id' => $_POST['razorpay_payment_id'],
        'razorpay_signature' => $_POST['razorpay_signature']
    ];
    $api->utility->verifyPaymentSignature($attributes);
    echo "Payment Successful";
} catch(SignatureVerificationError $e) {
    echo "Payment Failed: " . $e->getMessage();
}
